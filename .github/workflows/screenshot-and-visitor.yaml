name: screenshot-and-visitor

on:
  push:
    branches: [main, master]
  schedule:
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      add_like:
        description: 'Add your like (only one per user allowed)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pages: read
  actions: read

env:
  BADGE_STYLE: 'for-the-badge'
  BADGE_COLOR: 'brightgreen'
  LIKES_COLOR: 'gold'
  DATA_DIR: 'assets/db'
  SCREENSHOT_DIR: 'assets'

jobs:
  update-readme-and-visitor:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '20.x'
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'false'

    steps:
      - name: üî• Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: üîç Check if sections are commented
        run: |
          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞ —Å–µ–∫—Ü—ñ—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—É
          if grep -q "^[[:space:]]*<!--.*üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ–µ–∫—Ç—É" README.md || grep -q "^[[:space:]]*<!--.*üì∏ Latest Screenshot" README.md; then
            echo "üì∏ Screenshot section is commented out - skipping generation"
            echo "SCREENSHOT_SKIP=true" >> $GITHUB_ENV
          else
            echo "üì∏ Screenshot section is active - proceeding with generation"
            echo "SCREENSHOT_SKIP=false" >> $GITHUB_ENV
          fi

          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞ —Å–µ–∫—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          if grep -q "^[[:space:]]*<!--.*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GitHub" README.md || grep -q "^[[:space:]]*<!--.*üìä GitHub Statistics" README.md; then
            echo "üìä Stats section is commented out - skipping generation"
            echo "STATS_SKIP=true" >> $GITHUB_ENV
          else
            echo "üìä Stats section is active - proceeding with generation"
            echo "STATS_SKIP=false" >> $GITHUB_ENV
          fi

      - name: üöÄ Initialize workflow
        run: |
          DATA_DIR="$DATA_DIR"
          SCREENSHOT_DIR="$SCREENSHOT_DIR"
          mkdir -p "$DATA_DIR" "$SCREENSHOT_DIR"

          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–º—ñ—Å—Ç README
          cp README.md README_backup.md

          # –û—Ç—Ä–∏–º—É—î–º–æ –≤–º—ñ—Å—Ç –¥–æ —ñ –ø—ñ—Å–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ—ó —Å–µ–∫—Ü—ñ—ó
          awk '/<!-- AUTOGEN:STATS -->/{exit} {print}' README.md > README_before.tmp
          awk '/<!-- END:AUTOGEN -->/{found=1; next} found{print}' README.md > README_after.tmp

          # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π README –±–µ–∑ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –≤–º—ñ—Å—Ç—É
          {
            cat README_before.tmp
            echo "<!-- AUTOGEN:STATS -->"
            echo "üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."
            echo "<!-- END:AUTOGEN -->"
            cat README_after.tmp
          } > README.md

          echo "üöÄ Workflow initialized, README prepared for updates"

      - name: üìä Collect all statistics
        run: |
          # [–Ü—Å–Ω—É—é—á–∏–π –∫–æ–¥ –∑–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω]
          # –î–æ–¥–∞–π—Ç–µ —Ç—É—Ç –≤–µ—Å—å –≤–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–¥ –∑–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

      - name: üñ• Setup Node.js and dependencies
        run: |
          if [ "$SCREENSHOT_SKIP" = "true" ]; then
            echo "‚è≠Ô∏è Skipping Node.js setup - screenshot generation disabled"
            exit 0
          fi
          # [–Ü—Å–Ω—É—é—á–∏–π –∫–æ–¥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Node.js –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω]

      - name: üì∏ Generate screenshot from GitHub Pages
        run: |
          if [ "$SCREENSHOT_SKIP" = "true" ]; then
            echo "‚è≠Ô∏è Screenshot generation skipped - section is commented out"
            echo "SCREENSHOT_CREATED=false" >> $GITHUB_ENV
            exit 0
          fi
          # [–Ü—Å–Ω—É—é—á–∏–π –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–∫—Ä—ñ–Ω—à–æ—Ç—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω]

      - name: üìù Update README with all content
        run: |
          REPO_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}"
          TECH_BADGES=$(cat $DATA_DIR/tech-badges.txt 2>/dev/null || echo "")

          DOWNLOADS_BADGE=""
          if [ -f "$DATA_DIR/downloads-badge.json" ]; then
            DOWNLOADS_BADGE="[![‚¨áÔ∏è Downloads](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/downloads-badge.json)](https://github.com/${{ github.repository }}/releases)"
          fi

          # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π README
          mv README_backup.md README.md

          # –û—Ç—Ä–∏–º—É—î–º–æ –≤–º—ñ—Å—Ç –¥–æ —ñ –ø—ñ—Å–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ—ó —Å–µ–∫—Ü—ñ—ó
          awk '/<!-- AUTOGEN:STATS -->/{exit} {print}' README.md > README_before.tmp
          awk '/<!-- END:AUTOGEN -->/{found=1; next} found{print}' README.md > README_after.tmp

          {
            cat README_before.tmp
            echo "<!-- AUTOGEN:STATS -->"
            
            # –î–æ–¥–∞—î–º–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω—ñ –±–µ–π–¥–∂—ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Å–µ–∫—Ü—ñ—è –Ω–µ –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞
            if [ "$STATS_SKIP" = "false" ]; then
              echo "$TECH_BADGES"
              echo ""
              echo "## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GitHub :"
              echo ""
              echo "[![üìä Views](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/visitors-badge.json)](https://github.com/${{ github.repository }}/graphs/traffic)"
              echo "[![‚≠ê Stars](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/likes-badge.json)](https://github.com/${{ github.repository }}/actions/workflows/screenshot-and-visitor.yaml)"
              echo "[![üì¶ Size](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/repo-size.json)](https://github.com/${{ github.repository }})"
              echo "[![üìÑ License](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/repo-license.json)](https://github.com/${{ github.repository }}/blob/main/LICENSE)"
              if [ -n "$DOWNLOADS_BADGE" ]; then
                echo "$DOWNLOADS_BADGE"
              fi
            else
              echo "<!-- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GitHub –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞ -->"
            fi
            
            # –î–æ–¥–∞—î–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Å–µ–∫—Ü—ñ—è –Ω–µ –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞
            if [ "$SCREENSHOT_SKIP" = "false" ] && [ "$SCREENSHOT_CREATED" = "true" ] && [ -f "$SCREENSHOT_DIR/screenshot.png" ]; then
              SCREENSHOT_SIZE=$(stat -f%z "$SCREENSHOT_DIR/screenshot.png" 2>/dev/null || stat -c%s "$SCREENSHOT_DIR/screenshot.png" 2>/dev/null || echo "0")
              if [ "$SCREENSHOT_SIZE" -gt 0 ]; then
                echo ""
                echo "## üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ–µ–∫—Ç—É"
                echo "![Project Screenshot](./$SCREENSHOT_DIR/screenshot.png)"
              fi
            else
              echo "<!-- üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ–µ–∫—Ç—É –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∏–π -->"
            fi
            
            echo "<!-- END:AUTOGEN -->"
            cat README_after.tmp
          } > README.md

          rm -f README_before.tmp README_after.tmp
          echo "‚úÖ README updated with all content"

      - name: üì§ Commit and deploy
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .

          COMMIT_MSG="üìä Auto-update: visitors, likes"
          if [ "$SCREENSHOT_CREATED" = "true" ]; then
            COMMIT_MSG="$COMMIT_MSG, and screenshot"
          fi

          git commit -m "$COMMIT_MSG" || exit 0
          git pull --rebase https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

          echo "‚úÖ All updates completed successfully"