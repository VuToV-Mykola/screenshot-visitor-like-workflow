name: screenshot-and-visitor

on:
  push:
    branches: [main, master]
  schedule:
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      add_like:
        description: 'Add your like (only one per user allowed)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pages: read
  actions: read

env:
  BADGE_STYLE: 'for-the-badge'
  BADGE_COLOR: 'brightgreen'
  LIKES_COLOR: 'gold'
  DATA_DIR: 'assets/db'
  SCREENSHOT_DIR: 'assets'
jobs:
  update-readme-and-visitor:
    runs-on: ubuntu-latest
    env:
      # –î–æ–¥–∞—î–º–æ —Ü—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é
      NODE_VERSION: '20.x'
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'false'
      PUPPETEER_EXECUTABLE_PATH: '/usr/bin/google-chrome-stable'
    steps:
      - name: üî• Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: üöÄ Initialize workflow
        run: |
          DATA_DIR="$DATA_DIR"
          SCREENSHOT_DIR="$SCREENSHOT_DIR"

          # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
          mkdir -p "$DATA_DIR" "$SCREENSHOT_DIR"

          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ AUTOGEN —Å–µ–∫—Ü—ñ—ó
          awk '/<!-- AUTOGEN:STATS -->/{exit} {print}' README.md > README_before.tmp
          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—ñ—Å–ª—è AUTOGEN —Å–µ–∫—Ü—ñ—ó
          awk '/<!-- END:AUTOGEN -->/{found=1; next} found{print}' README.md > README_after.tmp

          # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π README –∑ –æ—á–∏—â–µ–Ω–æ—é AUTOGEN —Å–µ–∫—Ü—ñ—î—é
          {
            cat README_before.tmp
            echo "<!-- AUTOGEN:STATS -->"
            echo "üìÑ Updating statistics and screenshot..."
            echo "<!-- END:AUTOGEN -->"
            cat README_after.tmp
          } > README.md

          # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
          rm -f README_before.tmp README_after.tmp

          echo "üöÄ Workflow initialized, README cleared"

      - name: üìä Collect all statistics
        run: |
          DATA_DIR="$DATA_DIR"
          STATS_FILE="$DATA_DIR/stats-data.json"
          USERS_FILE="$DATA_DIR/unique-users.json"
          STARGAZERS_FILE="$DATA_DIR/stargazers.json"
          MANUAL_LIKES_FILE="$DATA_DIR/manual-likes.json"
          OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          REPO=$(echo "${{ github.repository }}" | cut -d'/' -f2)

          echo "üìä Collecting all repository statistics..."

          # === VISITORS ===
          echo "üëÄ Fetching visitors..."
          VIEWS=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/traffic/views" \
            | jq '.uniques // 0')
          echo "üëÄ Unique visitors: $VIEWS"

          # === STARS & LIKES ===
          echo "‚≠ê Processing stars and likes..."
          STARS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/stargazers")

          if echo "$STARS_RESPONSE" | jq -e . >/dev/null 2>&1; then
            STARS_USERS=$(echo "$STARS_RESPONSE" | jq -r '.[].login' | jq -R -s 'split("\n") | map(select(length > 0))')
            STARS_COUNT=$(echo "$STARS_USERS" | jq 'length')
            STARGAZERS_DETAILED=$(echo "$STARS_RESPONSE" | jq '[.[] | {login: .login, avatar_url: .avatar_url, html_url: .html_url, starred_at: now | strftime("%Y-%m-%d %H:%M:%S")}]')
          else
            STARS_USERS='[]'
            STARS_COUNT=0
            STARGAZERS_DETAILED='[]'
          fi

          # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          [ ! -f "$STATS_FILE" ] && echo '{"manual_likes": {"users": []}}' > "$STATS_FILE"

          # –û–±—Ä–æ–±–ª—è—î–º–æ –º–∞–Ω—É–∞–ª—å–Ω—ñ –ª–∞–π–∫–∏
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.add_like }}" = "true" ]; then
            USER="${{ github.actor }}"
            IS_STARGAZER=$(echo "$STARS_USERS" | jq --arg user "$USER" 'index($user) != null')
            
            if [ "$IS_STARGAZER" = "false" ]; then
              ALREADY_LIKED=$(jq --arg user "$USER" '.manual_likes.users | index($user) != null' "$STATS_FILE")
              if [ "$ALREADY_LIKED" = "false" ]; then
                CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S")
                jq --arg user "$USER" --arg time "$CURRENT_TIME" \
                  '.manual_likes.users += [$user] | .manual_likes.details += [{login: $user, liked_at: $time, type: "manual"}]' \
                  "$STATS_FILE" > tmp.json && mv tmp.json "$STATS_FILE"
                echo "üíñ New manual like from $USER!"
              fi
            fi
          fi

          MANUAL_LIKES_COUNT=$(jq -r '.manual_likes.users | length' "$STATS_FILE")
          TOTAL_LIKES=$((STARS_COUNT + MANUAL_LIKES_COUNT))

          # –°—Ç–≤–æ—Ä—é—î–º–æ JSON —Ñ–∞–π–ª–∏ –¥–ª—è –±–µ–π–¥–∂—ñ–≤
          {
            echo "{"
            echo "  \"schemaVersion\": 1,"
            echo "  \"label\": \"üìä views\","
            echo "  \"message\": \"$VIEWS\","
            echo "  \"color\": \"$BADGE_COLOR\","
            echo "  \"style\": \"$BADGE_STYLE\""
            echo "}"
          } > "$DATA_DIR/visitors-badge.json"

          {
            echo "{"
            echo "  \"schemaVersion\": 1,"
            echo "  \"label\": \"‚≠ê stars\","
            echo "  \"message\": \"$TOTAL_LIKES\","
            echo "  \"color\": \"$LIKES_COLOR\","
            echo "  \"style\": \"$BADGE_STYLE\""
            echo "}"
          } > "$DATA_DIR/likes-badge.json"

          # === REPOSITORY INFO ===
          echo "üì¶ Fetching repository information..."
          REPO_INFO=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO")

          REPO_SIZE=$(echo "$REPO_INFO" | jq -r '.size // 0')
          REPO_SIZE_MB=$(echo "scale=1; $REPO_SIZE / 1024" | bc -l 2>/dev/null || echo "0")
          MAIN_LANGUAGE=$(echo "$REPO_INFO" | jq -r '.language // "Unknown"')
          LICENSE=$(echo "$REPO_INFO" | jq -r '.license.name // "No License"')

          # === RELEASES & DOWNLOADS ===
          echo "üì¶ Fetching releases information..."
          RELEASES_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/releases")

          TOTAL_DOWNLOADS=0
          RELEASES_COUNT=0
          HAS_RELEASES=false

          if echo "$RELEASES_RESPONSE" | jq -e '. | length > 0' >/dev/null 2>&1; then
            RELEASES_COUNT=$(echo "$RELEASES_RESPONSE" | jq 'length')
            TOTAL_DOWNLOADS=$(echo "$RELEASES_RESPONSE" | jq '[.[].assets[].download_count] | add // 0')
            HAS_RELEASES=true
            echo "üì¶ Found $RELEASES_COUNT releases with $TOTAL_DOWNLOADS total downloads"
          else
            echo "üì¶ No releases found"
          fi

          # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –±–µ–π–¥–∂—ñ
          {
            echo "{"
            echo "  \"schemaVersion\": 1,"
            echo "  \"label\": \"üì¶ size\","
            echo "  \"message\": \"${REPO_SIZE_MB}MB\","
            echo "  \"color\": \"blue\","
            echo "  \"style\": \"$BADGE_STYLE\""
            echo "}"
          } > "$DATA_DIR/repo-size.json"

          {
            echo "{"
            echo "  \"schemaVersion\": 1,"
            echo "  \"label\": \"üî§ language\","
            echo "  \"message\": \"$MAIN_LANGUAGE\","
            echo "  \"color\": \"green\","
            echo "  \"style\": \"$BADGE_STYLE\""
            echo "}"
          } > "$DATA_DIR/repo-language.json"

          {
            echo "{"
            echo "  \"schemaVersion\": 1,"
            echo "  \"label\": \"üìÑ license\","
            echo "  \"message\": \"$LICENSE\","
            echo "  \"color\": \"blue\","
            echo "  \"style\": \"$BADGE_STYLE\""
            echo "}"
          } > "$DATA_DIR/repo-license.json"

          if [ "$HAS_RELEASES" = true ]; then
            {
              echo "{"
              echo "  \"schemaVersion\": 1,"
              echo "  \"label\": \"‚¨áÔ∏è downloads\","
              echo "  \"message\": \"$TOTAL_DOWNLOADS\","
              echo "  \"color\": \"orange\","
              echo "  \"style\": \"$BADGE_STYLE\""
              echo "}"
            } > "$DATA_DIR/downloads-badge.json"
          fi

          # === –¢–ï–•–ù–û–õ–û–ì–Ü–ß–ù–Ü –ë–ï–ô–î–ñ–Ü ===
          echo "üîß Generating technology badges..."
          TECH_BADGES=""

          # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∑ GitHub API
          LANGUAGES_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/languages")

          if echo "$LANGUAGES_RESPONSE" | jq -e . >/dev/null 2>&1; then
            TOP_LANGUAGES=$(echo "$LANGUAGES_RESPONSE" | jq -r 'to_entries | sort_by(.value) | reverse | .[0:3] | .[].key')
            
            for lang in $TOP_LANGUAGES; do
              case $lang in
                "HTML") TECH_BADGES="$TECH_BADGES[![HTML5](https://img.shields.io/badge/HTML5-E34F26?style=for-the-badge&logo=html5&logoColor=white)](https://developer.mozilla.org/en-US/docs/Web/HTML) " ;;
                "CSS") TECH_BADGES="$TECH_BADGES[![CSS3](https://img.shields.io/badge/CSS3-1572B6?style=for-the-badge&logo=css3&logoColor=white)](https://developer.mozilla.org/en-US/docs/Web/CSS) " ;;
                "JavaScript") TECH_BADGES="$TECH_BADGES[![JavaScript](https://img.shields.io/badge/JavaScript-F7DF1E?style=for-the-badge&logo=javascript&logoColor=black)](https://developer.mozilla.org/en-US/docs/Web/JavaScript) " ;;
                "TypeScript") TECH_BADGES="$TECH_BADGES[![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white)](https://www.typescriptlang.org/) " ;;
                "Python") TECH_BADGES="$TECH_BADGES[![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=python&logoColor=white)](https://www.python.org/) " ;;
                "Java") TECH_BADGES="$TECH_BADGES[![Java](https://img.shields.io/badge/Java-ED8B00?style=for-the-badge&logo=java&logoColor=white)](https://www.java.com/) " ;;
              esac
            done
          fi

          # –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
          TECH_BADGES="$TECH_BADGES[![VS Code](https://img.shields.io/badge/VS_Code-007ACC?style=for-the-badge&logo=visual-studio-code&logoColor=white)](https://code.visualstudio.com/) "
          TECH_BADGES="$TECH_BADGES[![GitHub](https://img.shields.io/badge/GitHub-181717?style=for-the-badge&logo=github&logoColor=white)](https://github.com/) "
          TECH_BADGES="$TECH_BADGES[![Figma](https://img.shields.io/badge/Figma-F24E1E?style=for-the-badge&logo=figma&logoColor=white)](https://www.figma.com/) "

          echo "$TECH_BADGES" > "$DATA_DIR/tech-badges.txt"

          echo "üíæ Saving detailed user information..."

          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ stargazers
          {
            echo "{\"count\": $STARS_COUNT, \"users\": $STARGAZERS_DETAILED, \"updated_at\": \"$(date -u +"%Y-%m-%d %H:%M:%S")\"}"
          } > "$STARGAZERS_FILE"

          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–Ω—É–∞–ª—å–Ω—ñ –ª–∞–π–∫–∏
          MANUAL_LIKES_DETAILED=$(jq -r '.manual_likes.details // []' "$STATS_FILE")
          {
            echo "{\"count\": $MANUAL_LIKES_COUNT, \"users\": $MANUAL_LIKES_DETAILED, \"updated_at\": \"$(date -u +"%Y-%m-%d %H:%M:%S")\"}"
          } > "$MANUAL_LIKES_FILE"

          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
          ALL_UNIQUE_USERS=$(echo "$STARS_USERS" | jq --argjson manual "$(jq -r '.manual_likes.users // []' "$STATS_FILE")" '. + $manual | unique')
          TOTAL_UNIQUE_USERS=$(echo "$ALL_UNIQUE_USERS" | jq 'length')

          {
            echo "{"
            echo "  \"total_unique_users\": $TOTAL_UNIQUE_USERS,"
            echo "  \"unique_visitors\": $VIEWS,"
            echo "  \"stargazers\": {"
            echo "    \"count\": $STARS_COUNT,"
            echo "    \"users\": $STARS_USERS"
            echo "  },"
            echo "  \"manual_likes\": {"
            echo "    \"count\": $MANUAL_LIKES_COUNT,"
            echo "    \"users\": $(jq -r '.manual_likes.users // []' "$STATS_FILE")"
            echo "  },"
            echo "  \"all_engaged_users\": $ALL_UNIQUE_USERS,"
            echo "  \"updated_at\": \"$(date -u +"%Y-%m-%d %H:%M:%S")\""
            echo "}"
          } > "$USERS_FILE"

          echo "‚úÖ All statistics collected: Views=$VIEWS, Stars=$STARS_COUNT, Manual=$MANUAL_LIKES_COUNT, Total=$TOTAL_LIKES"
          echo "üë• Total unique engaged users: $TOTAL_UNIQUE_USERS"

          - name: üñ• Setup Node.js and dependencies
            run: |
              # Setup Node.js - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω—É –≤–µ—Ä—Å—ñ—é
              echo "üîß Setting up Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
              
              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js
              echo "Node.js version: $(node --version)"
              echo "npm version: $(npm --version)"
              
              # Setup Chrome
              echo "üåê Setting up Chrome..."
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
              sudo apt-get update
              sudo apt-get install -y google-chrome-stable jq libgbm-dev
              
              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Chrome
              echo "Chrome version: $(google-chrome-stable --version || echo 'Chrome not available')"
              
              # Install Node dependencies –∑ –æ–±—Ö—ñ–¥–Ω–∏–º–∏ —à–ª—è—Ö–∞–º–∏ –¥–ª—è –ø–æ–º–∏–ª–æ–∫
              echo "üì¶ Installing Puppeteer..."
              
              # –°–ø—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ –ø—ñ–¥—Ö–æ–¥—ñ–≤ –¥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è puppeteer
              MAX_RETRIES=3
              RETRY_COUNT=0
              INSTALL_SUCCESS=false
              
              while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$INSTALL_SUCCESS" = "false" ]; do
                echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."
                
                # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∏ —Ç–∞ –ø—ñ–¥—Ö–æ–¥–∏
                if [ $RETRY_COUNT -eq 0 ]; then
                  # –ü–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–µ—î—Å—Ç—Ä
                  npm config set registry https://registry.npmjs.org/
                  npm install --no-package-lock --no-save puppeteer@latest
                elif [ $RETRY_COUNT -eq 1 ]; then
                  # –î—Ä—É–≥–∞ —Å–ø—Ä–æ–±–∞ - –∑ –æ—á–∏—â–µ–Ω–Ω—è–º –∫–µ—à—É
                  npm cache clean --force
                  npm install --no-package-lock --no-save puppeteer@latest --fetch-retry-mintimeout 20000 --fetch-retry-maxtimeout 120000
                else
                  # –¢—Ä–µ—Ç—è —Å–ø—Ä–æ–±–∞ - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
                  npm install --no-package-lock --no-save puppeteer@latest --ignore-scripts
                fi
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ puppeteer
                if [ -d "node_modules/puppeteer" ] || [ -f "node_modules/puppeteer/package.json" ]; then
                  INSTALL_SUCCESS=true
                  echo "‚úÖ Puppeteer installed successfully"
                else
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  echo "‚ùå Puppeteer installation failed, retrying in 5 seconds..."
                  sleep 5
                fi
              done
              
              # –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ–≤–¥–∞–ª—ñ, —Å–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç
              if [ "$INSTALL_SUCCESS" = "false" ]; then
                echo "‚ö†Ô∏è Falling back to puppeteer-core..."
                npm install --no-package-lock --no-save puppeteer-core@latest
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏–º–≤–æ–ª—ñ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                if [ -d "node_modules/puppeteer-core" ] && [ ! -d "node_modules/puppeteer" ]; then
                  ln -s puppeteer-core node_modules/puppeteer
                  echo "‚úÖ Using puppeteer-core as fallback"
                fi
              fi
              
              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å puppeteer
              if [ -d "node_modules/puppeteer" ]; then
                echo "‚úÖ Puppeteer is available: $(node -e \"console.log(require('./node_modules/puppeteer/package.json').version)\")"
              else
                echo "‚ùå Puppeteer could not be installed - screenshot functionality may not work"
                echo "SCREENSHOT_DEPENDENCIES_AVAILABLE=false" >> $GITHUB_ENV
                exit 0  # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ workflow –Ω–∞–≤—ñ—Ç—å –±–µ–∑ puppeteer
              fi
              
              echo "SCREENSHOT_DEPENDENCIES_AVAILABLE=true" >> $GITHUB_ENV
              echo "‚úÖ All dependencies installed"
          - name: üì∏ Generate screenshot
            run: |
              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
              if [ "$SCREENSHOT_DEPENDENCIES_AVAILABLE" = "false" ]; then
                echo "‚ùå Screenshot dependencies not available - skipping screenshot"
                echo "SCREENSHOT_CREATED=false" >> $GITHUB_ENV
                exit 0
              fi
              
              SCREENSHOT_CREATED=false

              node -e "
              const puppeteer = require('puppeteer');
              const fs = require('fs');
              const path = require('path');
              const { execSync } = require('child_process');

              async function takeScreenshot() {
                let browser;
                try {
                  const screenshotDir = process.env.SCREENSHOT_DIR || 'assets';
                  const screenshotPath = path.resolve(screenshotDir, 'screenshot.png');
                  
                  if (!fs.existsSync(screenshotDir)) fs.mkdirSync(screenshotDir, { recursive: true });
                  if (fs.existsSync(screenshotPath)) fs.unlinkSync(screenshotPath);
                  
                  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Chrome
                  let chromeExecutable = '/usr/bin/google-chrome';
                  if (!fs.existsSync(chromeExecutable)) {
                    // –®—É–∫–∞—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —à–ª—è—Ö–∏ –¥–æ Chrome
                    try {
                      const chromePath = execSync('which google-chrome-stable || which google-chrome', { encoding: 'utf8' }).trim();
                      if (chromePath) chromeExecutable = chromePath;
                    } catch (e) {
                      console.log('‚ùå Chrome not found:', e.message);
                      console.log('SCREENSHOT_SUCCESS=false');
                      return;
                    }
                  }

                  console.log('Using Chrome executable:', chromeExecutable);
                  
                  const browserArgs = [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor',
                    '--headless'
                  ];

                  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
                  if (process.env.CI) {
                    browserArgs.push('--single-process');
                    browserArgs.push('--no-zygote');
                    browserArgs.push('--no-first-run');
                    browserArgs.push('--disable-extensions');
                  }

                  browser = await puppeteer.launch({
                    args: browserArgs,
                    executablePath: chromeExecutable,
                    timeout: 60000,
                    dumpio: true  // –î–µ—Ç–∞–ª—å–Ω—ñ –ª–æ–≥–∏ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
                  });
                  
                  const page = await browser.newPage();
                  await page.setViewport({ width: 1280, height: 800 });
                  
                  const githubPages = 'https://' + '${{ github.repository_owner }}' + '.github.io/' + '${{ github.event.repository.name }}' + '/';
                  const indexPath = path.join(process.cwd(), 'index.html');
                  
                  let targetUrl;
                  let urlType;
                  let shouldTakeScreenshot = false;
                  
                  if (fs.existsSync(indexPath)) {
                    targetUrl = 'file://' + indexPath;
                    urlType = 'local file';
                    shouldTakeScreenshot = true;
                    console.log('üìÅ Found local index.html file');
                  } else {
                    targetUrl = githubPages;
                    urlType = 'GitHub Pages';
                    console.log('üåê Checking GitHub Pages availability...');
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å GitHub Pages
                    try {
                      const response = await page.goto(targetUrl, { 
                        waitUntil: 'networkidle0', 
                        timeout: 30000 
                      });
                      
                      if (response && response.status() === 200) {
                        const pageTitle = await page.title();
                        const pageContent = await page.content();
                        
                        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–º—ñ—Å—Ç—É
                        const hasMeaningfulContent = pageContent.length > 500 && 
                                                   !pageTitle.includes('404') &&
                                                   !pageContent.includes('There isn\\'t a GitHub Pages site here');
                        
                        if (hasMeaningfulContent) {
                          console.log('‚úÖ GitHub Pages is accessible with meaningful content');
                          shouldTakeScreenshot = true;
                        } else {
                          console.log('‚ùå GitHub Pages has insufficient content');
                        }
                      } else {
                        console.log('‚ùå GitHub Pages returned status:', response?.status() || 'unknown');
                      }
                    } catch (navError) {
                      console.log('‚ùå Cannot access GitHub Pages:', navError.message);
                    }
                  }
                  
                  if (!shouldTakeScreenshot) {
                    console.log('üö´ Skipping screenshot - no valid content found');
                    console.log('SCREENSHOT_SUCCESS=false');
                    return;
                  }
                  
                  console.log('üîó Taking screenshot from', urlType + ':', targetUrl);
                  
                  try {
                    await page.goto(targetUrl, { 
                      waitUntil: 'networkidle0', 
                      timeout: 60000 
                    });
                    
                    // –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    await page.waitForTimeout(5000);
                    
                    // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
                    await page.evaluate(async () => {
                      await new Promise(resolve => {
                        let totalHeight = 0;
                        const distance = 100;
                        const timer = setInterval(() => {
                          const scrollHeight = document.body.scrollHeight;
                          window.scrollBy(0, distance);
                          totalHeight += distance;
                          
                          if (totalHeight >= scrollHeight) {
                            clearInterval(timer);
                            resolve();
                          }
                        }, 100);
                      });
                    });
                    
                    await page.waitForTimeout(2000);
                    
                    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–≥–æ—Ä—É
                    await page.evaluate(() => window.scrollTo(0, 0));
                    await page.waitForTimeout(1000);

                    // –†–æ–±–∏–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç
                    await page.screenshot({ 
                      path: screenshotPath, 
                      fullPage: true,
                      quality: 80,
                      type: 'png'
                    });
                    
                    if (fs.existsSync(screenshotPath)) {
                      const stats = fs.statSync(screenshotPath);
                      const fileSizeKB = Math.round(stats.size / 1024);
                      
                      if (stats.size > 1000) {  // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä 1KB
                        console.log('‚úÖ Screenshot created successfully:', fileSizeKB + 'KB');
                        console.log('SCREENSHOT_SUCCESS=true');
                      } else {
                        console.log('‚ùå Screenshot file is too small:', fileSizeKB + 'KB');
                        fs.unlinkSync(screenshotPath);
                        console.log('SCREENSHOT_SUCCESS=false');
                      }
                    } else {
                      console.log('‚ùå Screenshot file was not created');
                      console.log('SCREENSHOT_SUCCESS=false');
                    }
                    
                  } catch (screenshotError) {
                    console.log('‚ùå Screenshot capture failed:', screenshotError.message);
                    console.log('SCREENSHOT_SUCCESS=false');
                  }
                  
                } catch (error) {
                  console.log('‚ùå Browser setup failed:', error.message);
                  console.log('SCREENSHOT_SUCCESS=false');
                } finally {
                  if (browser) {
                    try {
                      await browser.close();
                    } catch (closeError) {
                      console.log('‚ö†Ô∏è Browser close error:', closeError.message);
                    }
                  }
                }
              }

              takeScreenshot().catch(error => {
                console.log('‚ùå Unhandled error in screenshot process:', error.message);
                console.log('SCREENSHOT_SUCCESS=false');
              });
              " | tee screenshot_output.log

              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä–∏–Ω—à–æ—Ç—É
              if grep -q "SCREENSHOT_SUCCESS=true" screenshot_output.log; then
                echo "SCREENSHOT_CREATED=true" >> $GITHUB_ENV
                echo "üéØ Screenshot created successfully"
              else
                echo "SCREENSHOT_CREATED=false" >> $GITHUB_ENV
                echo "‚è≠Ô∏è Screenshot creation failed"
              fi

              # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—É
              if [ -f "$SCREENSHOT_DIR/screenshot.png" ]; then
                FILE_SIZE=$(stat -f%z "$SCREENSHOT_DIR/screenshot.png" 2>/dev/null || stat -c%s "$SCREENSHOT_DIR/screenshot.png" 2>/dev/null || echo 0)
                if [ "$FILE_SIZE" -lt 1000 ]; then
                  echo "‚ö†Ô∏è Screenshot file exists but is too small ($FILE_SIZE bytes), removing..."
                  rm -f "$SCREENSHOT_DIR/screenshot.png"
                  echo "SCREENSHOT_CREATED=false" >> $GITHUB_ENV
                fi
              fi

              rm -f screenshot_output.log
      - name: üìù Update README with all content
        run: |
          REPO_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}"
          TECH_BADGES=$(cat $DATA_DIR/tech-badges.txt 2>/dev/null || echo "")

          DOWNLOADS_BADGE=""
          if [ -f "$DATA_DIR/downloads-badge.json" ]; then
            DOWNLOADS_BADGE="[![‚¨áÔ∏è Downloads](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/downloads-badge.json)](https://github.com/${{ github.repository }}/releases)"
          fi

          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ AUTOGEN —Å–µ–∫—Ü—ñ—ó
          awk '/<!-- AUTOGEN:STATS -->/{exit} {print}' README.md > README_before.tmp
          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—ñ—Å–ª—è AUTOGEN —Å–µ–∫—Ü—ñ—ó
          awk '/<!-- END:AUTOGEN -->/{found=1; next} found{print}' README.md > README_after.tmp

          # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π README –∑ –æ–Ω–æ–≤–ª–µ–Ω–æ—é AUTOGEN —Å–µ–∫—Ü—ñ—î—é
          {
            cat README_before.tmp
            echo "<!-- AUTOGEN:STATS -->"
            echo "$TECH_BADGES"
            echo ""
            echo "[![üìä Views](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/visitors-badge.json)](https://github.com/${{ github.repository }}/graphs/traffic)"
            echo "[![‚≠ê Stars](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/likes-badge.json)](https://github.com/${{ github.repository }}/actions/workflows/screenshot-and-visitor.yaml)"
            echo "[![üì¶ Size](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/repo-size.json)](https://github.com/${{ github.repository }})"
            echo "[![üî§ Language](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/repo-language.json)](https://github.com/${{ github.repository }})"
            echo "[![üìÑ License](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/repo-license.json)](https://github.com/${{ github.repository }}/blob/main/LICENSE)"
            if [ -n "$DOWNLOADS_BADGE" ]; then
              echo "$DOWNLOADS_BADGE"
            fi
            
            # –î–æ–¥–∞—î–º–æ —Å–µ–∫—Ü—ñ—é —Å–∫—Ä–∏–Ω—à–æ—Ç—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –±—É–≤ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
            if [ "$SCREENSHOT_CREATED" = "true" ] && [ -f "$SCREENSHOT_DIR/screenshot.png" ]; then
              SCREENSHOT_SIZE=$(stat -f%z "$SCREENSHOT_DIR/screenshot.png" 2>/dev/null || stat -c%s "$SCREENSHOT_DIR/screenshot.png" 2>/dev/null || echo "0")
              if [ "$SCREENSHOT_SIZE" -gt 0 ]; then
                echo ""
                echo "## üì∏ Latest Screenshot"
                echo "![Project Screenshot]($SCREENSHOT_DIR/screenshot.png)"
              fi
            fi
            
            echo "<!-- END:AUTOGEN -->"
            cat README_after.tmp
          } > README.md

          # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
          rm -f README_before.tmp README_after.tmp

          echo "‚úÖ README updated with all content"

      - name: üì§ Commit and deploy
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .

          # –°—Ç–≤–æ—Ä—é—î–º–æ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∏–π –∫–æ–º—ñ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
          COMMIT_MSG="üìä Auto-update: visitors, likes"
          if [ "$SCREENSHOT_CREATED" = "true" ]; then
            COMMIT_MSG="$COMMIT_MSG, and screenshot"
          fi

          git commit -m "$COMMIT_MSG" || exit 0
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

          echo "üìÑ Triggering updates..."
          if curl -s -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pages" >/dev/null 2>&1; then
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pages/builds" >/dev/null || true
          fi

          echo "‚úÖ All updates completed successfully"
